name: Supply Chain Threat Scan

on:
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * *' # Daily at 06:00 UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  # Add any additional JSON feeds here (space-separated)
  # Example: https://raw.githubusercontent.com/bladeski/scan-compromised/main/threats.json
  FEED_URLS: ""
  OSV_ENDPOINT: https://api.osv.dev/v1/querybatch

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Prepare feeds folder
        run: mkdir -p feeds

      - name: Fetch OSV npm advisories
        run: |
          curl -sL --fail --retry 3 --retry-delay 5 \
            -H 'Content-Type: application/json' \
            -d '{"queries":[{"ecosystem":"npm"}]}' \
            "$OSV_ENDPOINT" \
            -o feeds/osv.json || echo "{}" > feeds/osv.json

      - name: Fetch additional feeds (optional)
        if: env.FEED_URLS != ''
        run: |
          i=0
          for url in $FEED_URLS; do
            i=$((i+1))
            echo "Fetching $url"
            if curl -sL --fail --retry 3 --retry-delay 5 "$url" -o "feeds/custom_$i.json"; then
              echo "Fetched $url"
            else
              echo "Skipping $url (fetch failed)"
            fi
          done

      - name: Merge feeds into threats.json
        id: merge
        run: |
          node - <<'EOF'
          const fs = require('fs');
          const path = require('path');

          const merged = {};
          const add = (name, versions) => {
            if (!name) return;
            if (!merged[name]) merged[name] = new Set();
            for (const v of versions || []) {
              if (typeof v === 'string' && v.trim()) merged[name].add(v.trim());
            }
          };

          const parseFeed = (data) => {
            if (!data || typeof data !== 'object') return;
            if (Array.isArray(data.advisories)) {
              for (const adv of data.advisories) {
                const name = adv?.package?.name || adv?.module_name || adv?.name;
                const versions = adv?.versions || adv?.affected_versions || adv?.bad_versions || [];
                add(name, versions);
              }
            } else if (Array.isArray(data.vulns)) {
              for (const v of data.vulns) {
                const affected = Array.isArray(v.affected) ? v.affected : [];
                for (const a of affected) {
                  const name = a?.package?.name;
                  if (Array.isArray(a.versions) && a.versions.length) {
                    add(name, a.versions);
                  }
                }
              }
            } else {
              for (const [k, v] of Object.entries(data)) {
                if (Array.isArray(v)) add(k, v);
              }
            }
          };

          const files = fs.readdirSync('feeds')
            .filter(f => f.endsWith('.json') && fs.statSync(path.join('feeds', f)).isFile());

          for (const f of files) {
            try {
              const raw = fs.readFileSync(path.join('feeds', f), 'utf8');
              if (!raw.trim()) continue;
              const json = JSON.parse(raw);
              parseFeed(json);
            } catch (e) {
              console.error('Skipping bad feed file:', f, e.message);
            }
          }

          const out = {};
          for (const [k, set] of Object.entries(merged)) {
            out[k] = Array.from(set).sort();
          }

          fs.writeFileSync('threats.json', JSON.stringify(out, null, 2));
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `count=${Object.keys(out).length}\n`);
          console.log('Merged threats.json with', Object.keys(out).length, 'packages');
          EOF

      - name: Check for changes
        id: git_diff
        run: |
          if git diff --quiet threats.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Run scan-compromised with merged threats
        id: scan
        run: |
          if [ "${{ steps.git_diff.outputs.changed }}" = "true" ]; then
            npx scan-compromised --threats-file threats.json > scan-results.txt || true
            echo "results<<EOF" >> $GITHUB_OUTPUT
            cat scan-results.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create update branch, commit, and push
        if: steps.git_diff.outputs.changed == 'true'
        id: commit_and_push
        run: |
          BRANCH="update-threats-$(date +%Y%m%d%H%M%S)"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BRANCH"
          git add threats.json
          git commit -m "chore: update threats.json from feeds"
          git push origin "$BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.git_diff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ steps.commit_and_push.outputs.branch }}
          base: main
          title: "chore: update threats.json â€” ${{ steps.merge.outputs.count }} threats listed"
          body: |
            Automated update of `threats.json` from:
            - OSV.dev (npm ecosystem)
            - Custom feeds: ${{ env.FEED_URLS || 'None' }}

            **Scan results:**
            ```
            ${{ steps.scan.outputs.results }}
            ```
          commit-message: "chore: update threats.json from feeds"
